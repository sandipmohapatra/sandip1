spring security
------------------------------
1)it is a framework which provides various security features:- authentication,authorization to create secure Java Enterprise Application.

i)authentication :- it the process of knowing the and identifying the user who wants to access.

ii)authorization :- it is the process to allow authority to perform action on the application.

so we can apply  authentication and authorization web request methods and access to individual domain.
----------------------------------------------------------------------------------------------------
The spring security framework support wide range of authentication models. 
These models are provided by the third party or the spring framework itself.

1)web Form-based authentication :- the web form will collect authentication and user credentials from the user.spring security will implement this when required.

2)HTTP basic authentication headers.

3)OpenID authentication :the spring security provides the access policies against the resources/users.(example :- admin,user)

4)Automatic remember-me authentication (cookies:- to store the username and password)

5) The spring security protect against common tasks.
6) In this we have servlet API integration.
7)integartion with sping MVC.
8)It provides single sign-on :- a user can access multiple application with the help of  single account(username and password). 

10)It support LDAP (lightwight directory access protocal) :- 
it is an open application protocol for maintaining and accessing distributed directory information services over internet . 

11)it support software localization:- it allows appliaction to display in any language.

12)JAAS (java authentication and authorization service)
it is a pluggable authentication module implemented in spring security to provide authentication process.

13)Basic access authentication :- spring security support basic access authentication that is used to provide username/password while making request over the network.

14)Digest Access authentication :- it is more secured than basic access authentication .it ask the user to confirm the identity of the user before sending any important data.
-----------------------------------
jar used for spring security are :-(org.springframework.security.remoting/web/ldap/oauth2-core)
1)spring-security-core.jar (it is used for access-control and authentication for standalone and remote application)
2)spring-security-remoting.jar(for remote application)
3)spring-security-web.jar
4)spring-security-ldap.jar
5)spring-security-oauth2-core.jar
6)spring-security-openid.jar
7)spring-security-test.jar
--------------------------------------------------------
maven :-
<dependency>
<groupid>org.springframework.security</groupid>
<artifactid>spring-security-remoting</artifactid>
<version>5.0.0.release</version>
</dependency>
<dependency>
<groupid>org.springframework.security</groupid>
<artifactid>spring-security-config</artifactid>
<version>5.0.0.release</version>
</dependency>
<dependency>
<groupid>org.springframework.security</groupid>
<artifactid>spring-security-web</artifactid>
<version>5.0.0.release</version>
</dependency>
---------------------------------------------------------------

controller.class
------------------------------
@Controller
public class MainController
{
@RequestMapping(value="/",method=RequestMethod.GET)
public ModelAndView welcomePage()
{
ModelAndView model=new ModelAndView();
model.addObject("tile","spring-security");
model.addObject("message","welcome to spring-security");
model.setViewName("hello");
return model;
}


@RequestMapping(value="/admin",method=RequestMethod.GET)
public ModelAndView adminPage()
{
ModelAndView model=new ModelAndView();
model.addObject("tile","spring-security admin");
model.addObject("message","welcome to admin");
model.setViewName("admin");
return model;
}
}
-------------------------------------------------------------------------
spring-security.xml
---------------------------------
<beans>
<http auto-config="true">
<intercept-url pattern="/admin" access="hasRole('ROLE_ADMIN')" />
</http>


<authentication-manager>
<authentication-provider>
<user-service>
<user name="vinit" password="1234" authorities="hasRole('ROLE_ADMIN')"/>
</authentication-manager>
</authentication-provider>
</user-service>
</beans>
------------------------------------------------------------------
spring-servlet.xml
-----------------------------
View Resolver
---------------------------------------
web.xml
----------------
DispatcherServlet
-------------------------------
hello.jsp
----------------
<h1>Title</h1>
<h1>Message </h1>${message}
---------------------------------------------
admin.jsp
------------------
<h1>Title</h1>
<h1>Message </h1>${message}
<c:if test="${pageContext.request.userPrincipal.name !=null}">
<h2>Welcome :${pageContext.request.userPrincipal.name}
<a href="<c:url value="/j_spring_security_logout"/>">Logout</a>
</c:if>
------------------------------------------------


