spring mvc +hibernate +validation+security+oracle
---------------------------------------------------------------------
maven project :-
 src ---main---
java---java.con.example.spring---dao,model,service,controller
resources--.properties,log4j
webapp----web-inf---views---.html/.jsp
           
pom.xml 
--------------------------------------------------------------------------------------
DAO :-
PersonDAO(interface)
--------------------------------------
public interface PersonDAO
{
addPerson(Person p);
updatePerson(Person p);
List<Person> listPersons();
Person getPersonById(int id);
removePerson(int id);
}
-----------------------------------------------
PersonDAOImpl
------------------------------------
public class PersonDAOImpl implements PersonDAO
{

@Override
addPerson(Person p)
{
session.save(p);
}
-------------------------
@Override
updatePerson(Person p)
{
session.update(p);
}
-------------------------
@Override
List<Person> listPersons()
{
for(Person p:personList)
{
print(p);
}}
-------------------------------
@Override
Person getPersonById(int id)
{
Person p=session.load(Person.class,new Integer(id));
return p;
}
----------------------------------------------------------
@Override
removePerson(int id);
{
Person p=session.load(Person.class,new Integer(id));
if(null !=p)
{
session.delete(p);
logger.info("person deleted");
}
else
{
logger.info("person not found");
}
-------------------------------------------------------------------
Model (related to the table)
----------------
@Entity
@Table(name="person")
public class Person
{
@Id
@Column(name="id")
@GeneratedValue(strategy=GenerationType.Assigned)

private int id;
String name,address,country;

getter(),setter();

@override
public String toString()
{
return "id= "+id+,"name ="+name+,"address ="+address;
}
}
--------------------------------
Service
-----------------
PersonService(interface)
--------------------------------------------
public interface PersonService
{
addPerson(Person p);
updatePerson(Person p);
List<Person> listPersons();
Person getPersonById(int id);
removePerson(int id);
}
---------------------------------------------------
PersonServiceImpl
-------------------------------------
class PersonServiceImpl implements PersonService
{
@Override
@Transactional  <-- it will refer to the interface and it's implemented class
addPerson(Person p)
{
this.personDAO.addPerson(p);
}
------------------------------------------------------------------------------

@Override
@Transactional  <-- it will refer to the interface and it's implemented class
updatePerson(Person p)
{
this.personDAO.updatePerson(p);
}
-------------------------------------------------------------------------
@Override
@Transactional  <-- it will refer to the interface and it's implemented class
List<Person> listPersons()
{
this.personDAO.listPerson();
}
---------------------------------------------------------
@Override
@Transactional  <-- it will refer to the interface and it's implemented class
getPersonById(int id)
{
this.personDAO.getPersonById(id);
}
-------------------------------------------------------------------
@override
@Transactional
removePerson(int id)
{
this.personDAO.removePerson(id);
}}
-------------------------------------------------------------------------------------------
view-------------controller-----------------DAO,SERVICE,MODEL
---------------------------------------------------------------------------------------------
CONTROLLER
-----------------------------
@Controller
public class PersonController
{

private PersonService ps;
@Qualifier(value="PersonService")
@RequestMapping(value ="/person", method=RequestMethod.GET)

public String listPerson(Model m)
{
m.addAttribute("person",new Person());
m.addAttribute("listPerson",this.ps.listPerson());
return "person";
}
---------------------------------------------
adding/modify person
------------------------
@RequestMapping(value="/person/add",method=RequestMethod.POST)

public String addPerson(@ModelAttribute("person") Person p)
{
if(p.getId() ==0) //adding new person
{
this.personService.addPerson(p);
}
else
{ //existing person we will call update
this.personService.updatePerson(p);
}
return "redirect:/person";
}
------------------------------------------------------
remove person {id}
---------------------------------
@RequestMapping("/remove/{id}")
public String removePerson(@PathVariable("id") int id)
{
this.personService.removePerson(int id);
return "redirect:/person";
}
-----------------------------------------------------------
@RequestMapping("edit/{id}")
public String editPerson(@PathVariable("id") int id,Model model)
{
model.addAttribute("person",this.personService.getPersonById(id));
model.addAttribute("person",this.personService.listPerson());
return "person";
}
}
---------------------------------------------------------------
views:-
---------------------------
<form action="/person/add" method="POST">
id<input type=text>
name<input type=text>
address<input type=text>
country<input type=text>
<submit>
</form>
---------------------------------------------------
servlet-context.xml
-----------------------------
<beans>
<bean class="org.springframework.web.servlet.view.viewResolver"/>
<property name="prefix" value="/web-inf/views/">
<property name="suffix" value=".jsp"|/>

<property name="driverclassname">
<property name="url" orcale/Mysql>
<property name="username">
<property name="password">


<beans:props key="hibernate.dialect">
<beans:props key="hibernate.show_sql">
---------------------------------------------------------------
Restful webservice + XML
-----------------------------------------------------
index.html
----------------
<html>
<form action="rest/products" methods="post">
ProductID:<input name="id">
ProductName:<input name="productname">
ProductCategory:<input name="productcategory">
<input type="submit">
-------------------------------------
Product.java
----------------------
import javax.xml.bind.annotation.XmlRootElement;
@XmlRootElement
class Product
{
String id;
String name;
String category;
default constructor();
parameterized constructor(); <---------------------------------------
getter(),setter();
-------------------------------------------------------------------------
ProductDao.java
------------------------------
import java.util.*;

class ProductDao
{
Map<String,Product> products=new HashMap<String,Product>();

Product product=new Product("1001","iphone-5","Mobile");
products.put("1",product);

Product product=new Product("1002","iphone-6","Mobile");
products.put("2",product);

Product product=new Product("1003","iphone-7","Mobile");
products.put("3",product);

}

Map<String,Product> getProducts()
{
return products;
}
}
---------------------------------------------------------------------
ProductResource.java
------------------------------------
import javax.ws.rs.Get;
import javax.ws.rs.PUT;
import javax.ws.rs.DELETE;
import javax.ws.rs.POST;
import javax.xml.bind.JAXBElement;

public class ProductResource
{

@Context
UriInfo uriInfo;
Request request;

public ProductResource()
{
productServive = new ProductService();
}

@GET
@Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON})
public List<Product> getProducts()
{
return productService.getProductAsList();
}



--------------------	
ProductService.java
-----------------------------------
class ProductService
{
ProductService()
{
productDao=ProductDao.instance;
}

public void createProduct(Product product)
{
productDao.getProducts().put(product.getId(),product);
}

Map<String,Product> getProducts()
{
return productDao.getProducts();
}

public List<Product> getProductAsList()
{
List<Product> productList=new ArrayList<Product>()
productList.addAll(productDao.getProducts().values());
return productList;
}

-------------------------------------------------------
RestFul webservices + JSON
--------------------------------------------------
Model
--------------------
Employee.java
-----------------------------
@XmlRootElement(name="employee")
class Employee
{
@XmlElement
Integer id;
@XmlElement
String FirstName;
@XmlElement
String LastName;
@XmlElement
String email;

Employee(Integer id,String FirstName,String LastName,String email)
{
this.id=id;
this.FirstName=FirstName;
this.LastName=LastName;
this.email=email;
}

getter(),setter();
@Override
public String toString()
{
return [id=+id+"fir.......];
}
-----------------------------------------------------
EmployeeList.java
--------------------------------
import javax.xml.bind.annotation.XmlRootElement;
@XmlRootElement (name="employees")

public class EmployeeList
{
private List<EmployeeList> employees = new ArrayList<EmployeeList>();

getter();
setter();
----------------------------------------------
Controller
EmployeeRestController.java
------------------------------------------------
@Controller
class EmployeeRestController
{

EmployeeList getEmployeeCollection()
{
EmployeeList employee=new EmployeeList();

EmployeeList empone=new EmployeeList(1,"sathish","kumar","satish@gmail.com");
EmployeeList emptwo=new EmployeeList(2,"meka","kumar","meka@gmail.com");
EmployeeList empthree=new EmployeeList(3,"vinit","kumar","vinit@gmail.com");
EmployeeList empfour=new EmployeeList(1,"Tarun","kumar","tarun@gmail.com");

employee.getEmployees().add(empone);
employee.getEmployees().add(emptwo);
employee.getEmployees().add(empthree);
employee.getEmployees().add(empfour);

return employee;
}

@RequestMapping(value="/employee",product=MediaType.APPLICATION_JSON_VALUE,method=RequestMethod.POST)
public String getAllEmployeesJSON(Model model)
{
model.addAttribute("employee",getEmployeeCollection());
return "jsonTemplate";
}
------------------------------------------------------------------------------------------
config :-
RestConfiguration.java
----------------
import org.springframework.web.servlet.view.json.MappingJackson2JsonView;
import org.springframework.web.servlet.view.json.BeanNameViewResolver;

@Configuration
class RestConfiguration
{
@Bean
public MappingJackson2JsonView jsonTemplate()
{
MappingJackson2JsonView view=new MappingJackson2JsonView();
view.setPrettyPrint(true);
return view;
}
--------------------------------------------------------------------------------
client
---------------
class SpringRestClient
{
final String uri="http://localhost:8081/restful2/employees";

public static void main(String args[])
{
RestTemplate restTemplate=new RestTemplate();
String result=restTemplate.getForObject(uri,String.class);

System.out.println("the result is "+result);
}
}
---------------------------------------------------------





















